# PROMPT: Deploy de Projeto na Vercel - Guia Completo

## üéØ OBJETIVO
Auxiliar no deploy completo de projetos Next.js, React, Vue, Nuxt, SvelteKit e outros frameworks suportados na Vercel, desde a verifica√ß√£o de compatibilidade at√© a publica√ß√£o final.

## üìã PR√â-REQUISITOS E VERIFICA√á√ïES

### 1. VERIFICA√á√ÉO DE CONTA GITHUB
**IMPORTANTE**: Conta GitHub √© OBRIGAT√ìRIA para deploy na Vercel.

#### Se o projeto n√£o tiver no GitHub:
1. Acesse https://github.com
2. Clique em "Sign up"
3. Preencha: username, email, password
4. Verifique o email
5. Configure 2FA (recomendado)
6. Crie um reposit√≥rio para o projeto

#### Se j√° tiver conta GitHub:
1. Verifique se est√° logado
2. Confirme que tem permiss√µes para criar reposit√≥rios
3. Verifique se o projeto atual est√° em um reposit√≥rio Git

### 2. VERIFICA√á√ÉO DE COMPATIBILIDADE COM VERCEL

#### Frameworks Suportados:
- ‚úÖ Next.js (recomendado)
- ‚úÖ React (Create React App)
- ‚úÖ Vue.js
- ‚úÖ Nuxt.js
- ‚úÖ SvelteKit
- ‚úÖ Astro
- ‚úÖ Remix
- ‚úÖ Gatsby
- ‚úÖ Vite
- ‚úÖ Angular
- ‚úÖ Sites est√°ticos (HTML/CSS/JS)

#### Estrutura de Arquivos Necess√°ria:
```
projeto/
‚îú‚îÄ‚îÄ package.json (obrigat√≥rio)
‚îú‚îÄ‚îÄ next.config.js (para Next.js)
‚îú‚îÄ‚îÄ vercel.json (opcional)
‚îú‚îÄ‚îÄ public/ (assets est√°ticos)
‚îú‚îÄ‚îÄ src/ ou pages/ (c√≥digo fonte)
‚îî‚îÄ‚îÄ .env.local (vari√°veis de ambiente)
```

### 3. üö® VERIFICA√á√ÉO CR√çTICA DE C√ìDIGO (OBRIGAT√ìRIA)

#### ‚ö†Ô∏è SEMPRE execute estas verifica√ß√µes ANTES do deploy para evitar falhas:

```bash
# 1. Verifica√ß√£o de tipos TypeScript (CR√çTICO)
npx tsc --noEmit

# 2. Verifica√ß√£o de build local (OBRIGAT√ìRIO)
npm run build

# 3. Verifica√ß√£o de lint (se configurado)
npm run lint

# 4. Teste de servidor local
npm run dev
```

#### üîß CORRE√á√ïES DE ERROS COMUNS QUE CAUSAM FALHA NO DEPLOY:

##### 1. Erro: Tipos "any" n√£o permitidos
**Problema**: `Argument of type 'any' is not assignable to parameter`
**Solu√ß√£o**: Substituir por tipos espec√≠ficos

```typescript
// ‚ùå INCORRETO - Causa falha no deploy
const MyComponent = (props: any) => { ... }
const cloudProps: Omit<any, "children"> = { ... }

// ‚úÖ CORRETO - Deploy funcionar√°
interface MyComponentProps {
  title: string;
  children: React.ReactNode;
  onClick?: () => void;
}
const MyComponent = ({ title, children, onClick }: MyComponentProps) => { ... }

// Para props de componentes complexos:
const cloudProps: Omit<CloudProps, "children"> = { ... }
```

##### 2. Erro: Props de √≠cones SVG incorretas
**Problema**: `Type '(props: any) => JSX.Element' is not assignable`
**Solu√ß√£o**: Usar tipos corretos do React

```typescript
// ‚ùå INCORRETO - Falha no deploy
icon: (props: any) => JSX.Element

// ‚úÖ CORRETO - Deploy funcionar√°
icon: (props: React.SVGProps<SVGSVGElement>) => JSX.Element
```

##### 3. Erro: Caracteres n√£o escapados em JSX
**Problema**: `Unexpected token. Expected jsx identifier`
**Solu√ß√£o**: Escapar caracteres especiais

```jsx
// ‚ùå INCORRETO - Falha no deploy
<span>Log in ‚Üí </span>
<span>Price: $50 & up</span>

// ‚úÖ CORRETO - Deploy funcionar√°
<span>Log in <span aria-hidden="true">&rarr;</span></span>
<span>Price: $50 &amp; up</span>
// OU usar vari√°veis JavaScript
<span>Log in {'->'}</span>
<span>Price: {'$50 & up'}</span>
```

##### 4. Erro: Imports de m√≥dulos inexistentes
**Problema**: `Cannot find module '@/components/...'`
**Solu√ß√£o**: Verificar se todos os imports existem

```typescript
// ‚úÖ SEMPRE verificar se existem antes de usar
import { Bars3Icon, XMarkIcon } from '@heroicons/react/24/outline'
import { Dialog, DialogPanel } from '@headlessui/react'

// Instalar depend√™ncias necess√°rias:
npm install @headlessui/react @heroicons/react
```

##### 5. Erro: Componentes sem export default
**Problema**: `Module has no default export`
**Solu√ß√£o**: Garantir exports corretos

```typescript
// ‚ùå INCORRETO
export const MyComponent = () => { ... }

// ‚úÖ CORRETO
const MyComponent = () => { ... }
export default MyComponent

// OU
export default function MyComponent() { ... }
```

##### 6. Erro: Vari√°veis de ambiente faltando
**Problema**: `process.env.VARIABLE_NAME is undefined`
**Solu√ß√£o**: Configurar todas as vari√°veis necess√°rias

```bash
# Verificar quais vari√°veis s√£o usadas no c√≥digo:
grep -r "process.env" src/

# Adicionar no .env.local:
NEXT_PUBLIC_API_URL=https://api.exemplo.com
DATABASE_URL=sua_database_url
```

### 4. COMANDOS DE VERIFICA√á√ÉO PR√â-DEPLOY

#### Verifica√ß√£o Completa:
```bash
# Verificar se √© um projeto Node.js
ls package.json

# Verificar scripts dispon√≠veis
npm run

# Verificar depend√™ncias
npm list --depth=0

# CR√çTICO: Verificar sintaxe e tipos
npx tsc --noEmit

# Verificar lint (se configurado)
npm run lint

# OBRIGAT√ìRIO: Testar build local
npm run build

# Testar servidor local
npm run dev
```

#### ‚ö†Ô∏è Se algum comando falhar, N√ÉO prossiga com o deploy at√© corrigir!

## üöÄ PROCESSO DE DEPLOY

### ETAPA 1: PREPARA√á√ÉO DO REPOSIT√ìRIO GIT

#### Se n√£o for um reposit√≥rio Git:
```bash
# Inicializar Git
git init

# Adicionar arquivos
git add .

# Primeiro commit
git commit -m "Initial commit"

# Conectar ao GitHub
git remote add origin https://github.com/SEU_USERNAME/SEU_REPOSITORIO.git
git branch -M main
git push -u origin main
```

#### Se j√° for um reposit√≥rio Git:
```bash
# Verificar status
git status

# Adicionar mudan√ßas
git add .

# Commit das mudan√ßas
git commit -m "Preparando para deploy na Vercel"

# Push para GitHub
git push origin main
```

### ETAPA 2: CONFIGURA√á√ÉO DE VARI√ÅVEIS DE AMBIENTE

#### Criar arquivo .env.local (se necess√°rio):
```env
# Exemplo de vari√°veis comuns
NEXT_PUBLIC_API_URL=https://api.exemplo.com
DATABASE_URL=sua_database_url
API_KEY=sua_api_key_secreta
```

#### Listar vari√°veis que precisam ser configuradas na Vercel:
- Identifique todas as vari√°veis do .env.local
- Separe vari√°veis p√∫blicas (NEXT_PUBLIC_*) das privadas
- Prepare os valores para inserir na Vercel

### ETAPA 3: DEPLOY VIA DASHBOARD VERCEL

#### M√©todo 1: Deploy via Dashboard (Recomendado)
1. Acesse https://vercel.com
2. Clique em "Continue with GitHub"
3. Autorize a Vercel no GitHub
4. Clique em "New Project"
5. Selecione o reposit√≥rio do GitHub
6. Configure as op√ß√µes:
   - **Project Name**: nome-do-projeto
   - **Framework Preset**: (detectado automaticamente)
   - **Root Directory**: ./ (padr√£o)
   - **Build Command**: npm run build (padr√£o)
   - **Output Directory**: .next (para Next.js)
   - **Development Command**: npm run dev (padr√£o)
7. Adicione Environment Variables (se necess√°rio)
8. Clique em "Deploy"

### ETAPA 4: DEPLOY VIA VERCEL CLI

#### Instala√ß√£o e Configura√ß√£o:
```bash
# Instalar Vercel CLI
npm install -g vercel

# Fazer login
vercel login

# Verificar autentica√ß√£o
vercel whoami
```

#### Deploy do Projeto:
```bash
# Deploy inicial (ir√° configurar o projeto)
vercel

# Deploy de produ√ß√£o
vercel --prod

# Deploy com configura√ß√µes espec√≠ficas
vercel --build-env NODE_ENV=production
```

### ETAPA 5: DEPLOY VIA VERCEL SDK (PROGRAM√ÅTICO)

#### Instala√ß√£o:
```bash
npm install @vercel/sdk
```

#### C√≥digo de Deploy:
```javascript
import { Vercel } from '@vercel/sdk';

const vercel = new Vercel({
  bearerToken: process.env.VERCEL_TOKEN,
});

async function deployProject() {
  try {
    // Criar projeto
    const project = await vercel.projects.createProject({
      name: 'meu-projeto',
      framework: 'nextjs',
      gitRepository: {
        type: 'github',
        repo: 'username/repo-name'
      }
    });

    // Fazer deploy
    const deployment = await vercel.deployments.createDeployment({
      name: 'meu-projeto',
      files: [], // arquivos do projeto
      projectSettings: {
        framework: 'nextjs',
        buildCommand: 'npm run build',
        outputDirectory: '.next'
      }
    });

    console.log('Deploy realizado:', deployment.url);
  } catch (error) {
    console.error('Erro no deploy:', error);
  }
}
```

## ‚öôÔ∏è CONFIGURA√á√ïES AVAN√áADAS

### 1. ARQUIVO vercel.json
```json
{
  "version": 2,
  "builds": [
    {
      "src": "package.json",
      "use": "@vercel/next"
    }
  ],
  "routes": [
    {
      "src": "/(.*)",
      "dest": "/$1"
    }
  ],
  "env": {
    "NODE_ENV": "production"
  },
  "functions": {
    "pages/api/*.js": {
      "maxDuration": 30
    }
  }
}
```

### 2. CONFIGURA√á√ÉO DE DOM√çNIO PERSONALIZADO
```bash
# Via CLI
vercel domains add meudominio.com

# Via Dashboard
# 1. Acesse o projeto na Vercel
# 2. V√° em Settings > Domains
# 3. Adicione o dom√≠nio personalizado
# 4. Configure DNS conforme instru√ß√µes
```

### 3. CONFIGURA√á√ÉO DE ENVIRONMENT VARIABLES
```bash
# Via CLI
vercel env add NODE_ENV production

# Via Dashboard
# 1. Acesse Settings > Environment Variables
# 2. Adicione cada vari√°vel
# 3. Selecione os ambientes (Development/Preview/Production)
```

## üîß TROUBLESHOOTING

### Problemas Comuns:

#### 1. Build Falha:
```bash
# Verificar logs
vercel logs

# Testar build local
npm run build

# Verificar vers√£o do Node.js
node --version
```

#### 2. Vari√°veis de Ambiente:
- Verificar se todas as vari√°veis est√£o configuradas
- Confirmar prefixos NEXT_PUBLIC_ para vari√°veis p√∫blicas
- Verificar se n√£o h√° espa√ßos ou caracteres especiais

#### 3. Problemas de Roteamento:
- Verificar arquivo next.config.js
- Configurar rewrites se necess√°rio
- Verificar se todas as rotas est√£o funcionando

#### 4. Problemas de Depend√™ncias:
```bash
# Limpar cache
npm cache clean --force

# Reinstalar depend√™ncias
rm -rf node_modules package-lock.json
npm install

# Verificar vulnerabilidades
npm audit fix
```

## üìä MONITORAMENTO P√ìS-DEPLOY

### 1. Verifica√ß√µes Essenciais:
- ‚úÖ Site carregando corretamente
- ‚úÖ Todas as p√°ginas funcionando
- ‚úÖ API routes respondendo
- ‚úÖ Vari√°veis de ambiente carregadas
- ‚úÖ SSL/HTTPS ativo
- ‚úÖ Performance adequada

### 2. Ferramentas de Monitoramento:
```bash
# Verificar status do deployment
vercel inspect URL_DO_DEPLOY

# Ver logs em tempo real
vercel logs --follow

# Verificar analytics
vercel analytics
```

### 3. Configura√ß√£o de Notifica√ß√µes:
- Configure webhooks para notifica√ß√µes
- Monitore erros via Vercel Dashboard
- Configure alertas de performance

## üîÑ ATUALIZA√á√ïES FUTURAS

### Deploy Autom√°tico:
- Cada push para main far√° deploy autom√°tico
- Pull requests criam preview deployments
- Branches podem ter deployments espec√≠ficos

### Rollback:
```bash
# Listar deployments
vercel list

# Fazer rollback
vercel rollback URL_DO_DEPLOYMENT_ANTERIOR
```

## üìö RECURSOS ADICIONAIS

### Documenta√ß√£o Oficial:
- https://vercel.com/docs
- https://vercel.com/docs/cli
- https://vercel.com/docs/rest-api

### Comunidade:
- GitHub Discussions
- Discord da Vercel
- Stack Overflow

## ‚úÖ CHECKLIST FINAL ANTI-ERRO

### üö® VERIFICA√á√ïES CR√çTICAS PR√â-DEPLOY:
- [ ] **TypeScript**: `npx tsc --noEmit` executado sem erros
- [ ] **Build Local**: `npm run build` executado com sucesso
- [ ] **Tipos Any**: Todos os `any` substitu√≠dos por tipos espec√≠ficos
- [ ] **Props SVG**: √çcones usam `React.SVGProps<SVGSVGElement>`
- [ ] **Caracteres Escapados**: S√≠mbolos especiais (‚Üí, &, <, >) escapados corretamente
- [ ] **Imports V√°lidos**: Todos os imports verificados e depend√™ncias instaladas
- [ ] **Exports Default**: Componentes t√™m export default correto

### Antes do Deploy:
- [ ] Conta GitHub criada e configurada
- [ ] Projeto em reposit√≥rio Git
- [ ] Build local funcionando SEM ERROS
- [ ] Vari√°veis de ambiente identificadas
- [ ] Depend√™ncias atualizadas
- [ ] **ZERO erros de TypeScript**

### Durante o Deploy:
- [ ] Projeto conectado ao GitHub
- [ ] Configura√ß√µes corretas na Vercel
- [ ] Environment variables configuradas
- [ ] Deploy executado com sucesso
- [ ] **Logs de build verificados** para erros

### Ap√≥s o Deploy:
- [ ] Site funcionando corretamente
- [ ] Todas as funcionalidades testadas
- [ ] Performance verificada
- [ ] Dom√≠nio personalizado configurado (se aplic√°vel)
- [ ] Monitoramento ativo

### üõ†Ô∏è COMANDOS DE EMERG√äNCIA SE DEPLOY FALHAR:

```bash
# 1. Verificar erros espec√≠ficos
npx tsc --noEmit --pretty

# 2. Rebuild completo
rm -rf .next node_modules
npm install
npm run build

# 3. Verificar depend√™ncias faltando
npm audit fix
npm install --save-dev @types/react @types/node

# 4. Verificar configura√ß√£o TypeScript
cat tsconfig.json

# 5. Verificar sintaxe JSX
npm run lint --fix
```

## üéâ CONCLUS√ÉO

Seguindo este guia completo, voc√™ ter√° seu projeto deployado na Vercel com todas as melhores pr√°ticas implementadas. A Vercel oferece uma plataforma robusta e f√°cil de usar para deploy de aplica√ß√µes modernas.

**Lembre-se**: A Vercel detecta automaticamente a maioria das configura√ß√µes, mas sempre verifique se tudo est√° funcionando corretamente ap√≥s o deploy.

**Pr√≥ximos passos**: Configure monitoramento, analytics e considere implementar CI/CD mais avan√ßado conforme necess√°rio. 